import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-05b574d6.js";const p={},o=t(`<h3 id="示例-以彩色延迟为例" tabindex="-1"><a class="header-anchor" href="#示例-以彩色延迟为例" aria-hidden="true">#</a> 示例（以彩色延迟为例）</h3><blockquote><p>效果：配置文件各个地方可以直接使用变量%colorping%</p></blockquote><blockquote><p>这里提供两种方法</p></blockquote><ul><li>普通 LLJS 脚本（放在 plugins 目录）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/// &lt;reference path=&quot;./PixelFaramitaLuminousPolymerization/scripts/node_modules/@pf/index.d.ts&quot; /&gt;</span>
<span class="token comment">/// &lt;reference path=&quot;A:/Documents/GitHub/HelperLib/src/index.d.ts&quot; /&gt;</span>
mc<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">&quot;onServerStarted&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//添加监听，在服务器启动后，保证$pf变量正确获取</span>
  $pf<span class="token punctuation">.</span>Format<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;colorping&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">xuid<span class="token punctuation">,</span> xuidLang<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> extra</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> val <span class="token operator">=</span> $pf<span class="token punctuation">.</span>Api<span class="token punctuation">.</span>Format<span class="token punctuation">.</span><span class="token function">GetVariableInt</span><span class="token punctuation">(</span>xuid<span class="token punctuation">,</span> <span class="token string">&quot;ping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;§a&quot;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;§r&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;§2&quot;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;§r&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">110</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;§g&quot;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;§r&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;§c&quot;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;§r&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>内置脚本（放在 PFLP 的 scripts 文件夹下面）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//使用方法：</span>
<span class="token comment">//  放在PFLP的scripts文件夹下面</span>
<span class="token comment">//  然后在配置文件各个地方可以直接使用变量%colorping%</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Format<span class="token punctuation">,</span> Api <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@pf&quot;</span><span class="token punctuation">;</span>
Format<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;colorping&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">xuid<span class="token punctuation">,</span> xuidLang<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> extra</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> val <span class="token operator">=</span> Api<span class="token punctuation">.</span>Format<span class="token punctuation">.</span><span class="token function">GetVariableInt</span><span class="token punctuation">(</span>xuid<span class="token punctuation">,</span> <span class="token string">&quot;ping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;§a&quot;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;§r&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;§2&quot;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;§r&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">110</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;§g&quot;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;§r&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;§c&quot;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;§r&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),e=[o];function c(l,u){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","format.html.vue"]]);export{k as default};
